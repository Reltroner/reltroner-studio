{
  "title": "Full Stack Developer Interview Simulation ‚Äì Project Walkthrough & Security Readiness",
  "date": "2025-04-03T00:00:00.000Z",
  "slug": "fullstack-interview-summary",
  "image": "/images/fullstack-interview-summary.png",
  "author": "Rei Reltroner",
  "published": true,
  "body": {
    "raw": "\n## Q1: Project Folder Structure\n\nThis screenshot represents the structure of my own full-stack employee management system project:\n\n- **controllers/**: For business logic (e.g., attendance, users).\n- **routes/**: Defines the endpoints that redirect to corresponding views or actions.\n- **models/**: Contains MongoDB schema structures (user, employee, manager, QRCode).\n- **public/**: For static files like images.\n- **seeds/**: Scripts to insert and reset dummy data.\n- **utils/**: Utilities like `wrapAsync`, global error middleware, and custom validators.\n- **views/**: The EJS-based UI templates (frontend visuals).\n- **app.js**: Server-side app configuration and route mounting.\n- **package.json**: Contains dependencies and CLI commands like `nodemon app.js`.\n\n## Q2: How the Attendance Flow Works\n\nIt starts from `controllers/attendance.js` where both Admin and Manager can use the `viewLog` module to view and approve employee attendance. It connects to the `models/attendance.js` to retrieve attendance schemas, then continues through `routes/attendance.js`, and finally renders in `attendance/log.ejs`. Both Admin and Manager can insert check-in/check-out times, and confirm pending attendance entries.\n\n## Q3: QR Code Flow\n\nThe logic begins in `controllers/attendance.js` ‚Üí `scanQR` function. Admin/Manager generates and prints QR codes stored in `models/QRCode.js`. Routing is handled by `routes/attendance.js` and then rendered in `attendance/scan.ejs`. Each QR has a 24-hour expiration logic, preventing reuse or outdated attempts.\n\n## Q4: Role-Based Access Security\n\nAccess to the log page (`attendance/log`) is restricted by `isAuth.js` and `checkRole.js` middlewares. If any unauthorized users attempt to bypass, I‚Äôll temporarily shut down the server and investigate. For stronger future protection, I plan to implement 2FA login and email verification.\n\n## Q5: Deployment Readiness\n\nI have previously pushed and deployed frontend projects successfully using GitHub + Vercel with a `.com` domain. While backend/full stack deployment failed earlier due to no cloud-hosted DB, I plan to allocate budget for scalable DB services like MongoDB Atlas or Supabase for smooth deployment.\n\n## Q6 & Q7: Error Handling & Security Strategy\n\nI implemented a global error handler (`errorHandler.js`) and `ExpressError` utility in `utils/`. In production environments, I plan to invest in security upgrades, scalable infrastructure, and proper alert systems. For extreme threats like DDoS attacks, I will shut down the server and audit everything from database, middleware logic, to access controls.\n\n---\n\nüõ°Ô∏è This simulation represents my real project navigation, done while having the source code opened live during the interview-style practice. Every answer was formed based on my understanding and hands-on implementation.\n\n---\n\nüîô Back to [Blog](https://www.reltroner.com/blog)\n<div style=\"margin-top: 3rem; display: flex; gap: 1rem; flex-wrap: wrap;\">\n\n<a href=\"/files/fullstack-interview-summary.pdf\" style=\"padding: 0.75rem 1.5rem; background-color: #4A90E2; color: white; text-decoration: none; border-radius: 8px;\" target=\"_blank\">\nüìÑ Download PDF Version\n</a>\n\n</div>\n\n‚û°Ô∏è To [For Recruiters & Collaborators](https://www.reltroner.com/blog/for-recruiters)",
    "html": "<h2>Q1: Project Folder Structure</h2>\n<p>This screenshot represents the structure of my own full-stack employee management system project:</p>\n<ul>\n<li><strong>controllers/</strong>: For business logic (e.g., attendance, users).</li>\n<li><strong>routes/</strong>: Defines the endpoints that redirect to corresponding views or actions.</li>\n<li><strong>models/</strong>: Contains MongoDB schema structures (user, employee, manager, QRCode).</li>\n<li><strong>public/</strong>: For static files like images.</li>\n<li><strong>seeds/</strong>: Scripts to insert and reset dummy data.</li>\n<li><strong>utils/</strong>: Utilities like <code>wrapAsync</code>, global error middleware, and custom validators.</li>\n<li><strong>views/</strong>: The EJS-based UI templates (frontend visuals).</li>\n<li><strong>app.js</strong>: Server-side app configuration and route mounting.</li>\n<li><strong>package.json</strong>: Contains dependencies and CLI commands like <code>nodemon app.js</code>.</li>\n</ul>\n<h2>Q2: How the Attendance Flow Works</h2>\n<p>It starts from <code>controllers/attendance.js</code> where both Admin and Manager can use the <code>viewLog</code> module to view and approve employee attendance. It connects to the <code>models/attendance.js</code> to retrieve attendance schemas, then continues through <code>routes/attendance.js</code>, and finally renders in <code>attendance/log.ejs</code>. Both Admin and Manager can insert check-in/check-out times, and confirm pending attendance entries.</p>\n<h2>Q3: QR Code Flow</h2>\n<p>The logic begins in <code>controllers/attendance.js</code> ‚Üí <code>scanQR</code> function. Admin/Manager generates and prints QR codes stored in <code>models/QRCode.js</code>. Routing is handled by <code>routes/attendance.js</code> and then rendered in <code>attendance/scan.ejs</code>. Each QR has a 24-hour expiration logic, preventing reuse or outdated attempts.</p>\n<h2>Q4: Role-Based Access Security</h2>\n<p>Access to the log page (<code>attendance/log</code>) is restricted by <code>isAuth.js</code> and <code>checkRole.js</code> middlewares. If any unauthorized users attempt to bypass, I‚Äôll temporarily shut down the server and investigate. For stronger future protection, I plan to implement 2FA login and email verification.</p>\n<h2>Q5: Deployment Readiness</h2>\n<p>I have previously pushed and deployed frontend projects successfully using GitHub + Vercel with a <code>.com</code> domain. While backend/full stack deployment failed earlier due to no cloud-hosted DB, I plan to allocate budget for scalable DB services like MongoDB Atlas or Supabase for smooth deployment.</p>\n<h2>Q6 &#x26; Q7: Error Handling &#x26; Security Strategy</h2>\n<p>I implemented a global error handler (<code>errorHandler.js</code>) and <code>ExpressError</code> utility in <code>utils/</code>. In production environments, I plan to invest in security upgrades, scalable infrastructure, and proper alert systems. For extreme threats like DDoS attacks, I will shut down the server and audit everything from database, middleware logic, to access controls.</p>\n<hr>\n<p>üõ°Ô∏è This simulation represents my real project navigation, done while having the source code opened live during the interview-style practice. Every answer was formed based on my understanding and hands-on implementation.</p>\n<hr>\n<p>üîô Back to <a href=\"https://www.reltroner.com/blog\">Blog</a></p>\n<p>‚û°Ô∏è To <a href=\"https://www.reltroner.com/blog/for-recruiters\">For Recruiters &#x26; Collaborators</a></p>"
  },
  "_id": "blog/fullstack-interview-summary.md",
  "_raw": {
    "sourceFilePath": "blog/fullstack-interview-summary.md",
    "sourceFileName": "fullstack-interview-summary.md",
    "sourceFileDir": "blog",
    "contentType": "markdown",
    "flattenedPath": "blog/fullstack-interview-summary"
  },
  "type": "Blog"
}